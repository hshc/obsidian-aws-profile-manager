/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/aws-profile-handler/lib/ini.js
var require_ini = __commonJS({
  "node_modules/aws-profile-handler/lib/ini.js"(exports, module2) {
    "use strict";
    var Ini2 = class {
      static decodeIniData(rawData) {
        let currentSection;
        let map = {};
        let uniqueSectionFlag = false;
        let lines = rawData.split(/\r?\n/);
        if (Ini2._emptyCheck(lines))
          return {};
        lines.forEach((line) => {
          line = line.split(/(^|\s)[;#]/)[0].trim();
          if (!line)
            return;
          let section = line.match(/^\s*\[([^\[\]]+)\]\s*$/);
          if (section && uniqueSectionFlag) {
            throw new Error("Invalid AWS credential file. Cannot have nested sessions");
          } else if (section) {
            currentSection = section[1];
            uniqueSectionFlag = true;
          } else {
            let item = line.match(/^\s*(.+?)\s*=\s*(.+?)\s*$/);
            if (item) {
              map[currentSection] = map[currentSection] || {};
              map[currentSection][item[1]] = item[2];
              uniqueSectionFlag = false;
            } else {
              throw new Error("Invalid AWS credential file. Incomplete key/value pair");
            }
          }
        });
        return map;
      }
      static encodeIniFormat(iniObject) {
        function _flattenObject(object) {
          let listObject = Object.keys(object).reduce((result, key) => {
            result.push(key + "=" + object[key]);
            return result;
          }, []);
          return listObject;
        }
        let dividedIntoListOfObjects = Object.keys(iniObject).map((session) => {
          let newObject = {};
          newObject[session] = iniObject[session];
          return newObject;
        });
        let encodedIniContentList = dividedIntoListOfObjects.reduce(
          (iniContentList, sessionObject) => {
            let sessionName = Object.keys(sessionObject)[0];
            iniContentList.push("[" + sessionName + "]");
            let listChild = _flattenObject(sessionObject[sessionName]);
            return iniContentList.concat(listChild, "");
          },
          []
        );
        return encodedIniContentList.join("\n");
      }
      static _emptyCheck(array) {
        if (array.length === 0)
          return true;
        for (let item of array) {
          if (item.trim().length !== 0) {
            return false;
          }
        }
        return true;
      }
    };
    module2.exports = Ini2;
  }
});

// node_modules/aws-profile-handler/lib/utils.js
var require_utils = __commonJS({
  "node_modules/aws-profile-handler/lib/utils.js"(exports, module2) {
    "use strict";
    var fs2 = require("fs");
    var Utils2 = class {
      static writeFile(filePath, encodedOutput) {
        fs2.writeFileSync(filePath, encodedOutput, "utf-8");
      }
      static deepCopy(object) {
        return JSON.parse(JSON.stringify(object));
      }
      static readFile(filePath) {
        return fs2.readFileSync(filePath, "utf-8");
      }
    };
    module2.exports = Utils2;
  }
});

// node_modules/aws-profile-handler/index.js
var require_aws_profile_handler = __commonJS({
  "node_modules/aws-profile-handler/index.js"(exports, module2) {
    "use strict";
    var path2 = require("path");
    var os2 = require("os");
    var Ini2 = require_ini();
    var Utils2 = require_utils();
    var defaultFilePath2 = path2.join(os2.homedir(), ".aws", "credentials");
    var awsProfileHandler = class {
      /**
       * @deprecated
       * @param filePath
       */
      constructor(filePath) {
        const defaultFilePath3 = path2.join(os2.homedir(), ".aws", "credentials");
        this.filePath = filePath || defaultFilePath3;
        this.profileObject = Ini2.decodeIniData(Utils2.readFile(this.filePath));
      }
      /**
       * @deprecated
       * @return {Array}
       */
      listProfiles() {
        return Object.keys(this.profileObject);
      }
      /**
       * @deprecated
       * @param profile
       * @return {*}
       */
      getProfileCredentials(profile) {
        let credentials = this.profileObject[profile];
        if (!credentials)
          return null;
        else
          return Utils2.deepCopy(credentials);
      }
      /**
       * @deprecated
       * @param profile
       */
      deleteProfile(profile) {
        let outputProfileObject = Utils2.deepCopy(this.profileObject);
        delete outputProfileObject[profile];
        let encodedProfile = Ini2.encodeIniFormat(outputProfileObject);
        Utils2.writeFile(this.filePath, encodedProfile);
      }
      /**
       * @deprecated
       * @param profile
       * @param credentials
       */
      addProfile(profile, credentials) {
        let outputProfileObject = Utils2.deepCopy(this.profileObject);
        outputProfileObject[profile] = credentials;
        let encodedProfile = Ini2.encodeIniFormat(outputProfileObject);
        Utils2.writeFile(this.filePath, encodedProfile);
      }
      static listProfiles(filePath) {
        let credentialPath = filePath || defaultFilePath2;
        let profileObject = Ini2.decodeIniData(Utils2.readFile(credentialPath));
        return Object.keys(profileObject);
      }
      static getProfileCredentials(profile, filePath) {
        if (!profile || profile.trim().length === 0) {
          throw new Error("Invalid Input: profile name cannot be omitted nor only contains white spaces.");
        }
        let credentialPath = filePath || defaultFilePath2;
        let profileObject = Ini2.decodeIniData(Utils2.readFile(credentialPath));
        let credentials = profileObject[profile];
        if (!credentials)
          return null;
        else
          return Utils2.deepCopy(credentials);
      }
      static deleteProfile(profile, filePath) {
        if (!profile || profile.trim().length === 0) {
          throw new Error("Invalid Input: profile name cannot be omitted nor only contains white spaces.");
        }
        let credentialPath = filePath || defaultFilePath2;
        let profileObject = Ini2.decodeIniData(Utils2.readFile(credentialPath));
        let outputProfileObject = Utils2.deepCopy(profileObject);
        delete outputProfileObject[profile];
        let encodedProfile = Ini2.encodeIniFormat(outputProfileObject);
        Utils2.writeFile(credentialPath, encodedProfile);
      }
      static addProfile(profile, credentials, filePath) {
        if (!profile || profile.trim().length === 0) {
          throw new Error("Invalid Input: profile name cannot be omitted nor only contains white spaces.");
        }
        if (!credentials || Object.keys(credentials).length === 0) {
          throw new Error("Invalid Input: credentials cannot be omitted nor empty.");
        }
        if (Object.keys(credentials).length !== 2 || !this.isValidSchema(credentials) && !this.isValidAltSchema(credentials)) {
          throw new Error("Invalid input: credentials schema is invalid.");
        }
        let credentialPath = filePath || defaultFilePath2;
        let profileObject = Ini2.decodeIniData(Utils2.readFile(credentialPath));
        let outputProfileObject = Utils2.deepCopy(profileObject);
        outputProfileObject[profile] = credentials;
        let encodedProfile = Ini2.encodeIniFormat(outputProfileObject);
        Utils2.writeFile(credentialPath, encodedProfile);
      }
      static isValidSchema(credentials) {
        return credentials.hasOwnProperty("aws_access_key_id") && credentials.hasOwnProperty("aws_secret_access_key");
      }
      static isValidAltSchema(credentials) {
        return credentials.hasOwnProperty("role_arn") && credentials.hasOwnProperty("source_profile");
      }
    };
    module2.exports = awsProfileHandler;
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  SuggestAwsProfile: () => SuggestAwsProfile,
  default: () => MyPlugin,
  getSortedProfilesCredentials: () => getSortedProfilesCredentials
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var os = __toESM(require("os"));
var path = __toESM(require("path"));
var fs = __toESM(require("fs"));
var profileHandler = __toESM(require_aws_profile_handler());
var Ini = require_ini();
var Utils = require_utils();
var defaultFilePath = path.join(os.homedir(), ".aws", "credentials");
function addProfile(profile, credentials, filePath) {
  if (!profile || profile.trim().length === 0) {
    throw new Error("Invalid Input: profile name cannot be omitted nor only contains white spaces.");
  }
  if (!credentials || Object.keys(credentials).length === 0) {
    throw new Error("Invalid Input: credentials cannot be omitted nor empty.");
  }
  if (Object.keys(credentials).length < 3 || !profileHandler.isValidSchema(credentials) && !profileHandler.isValidAltSchema(credentials)) {
    throw new Error("Invalid input: credentials schema is invalid.");
  }
  let credentialPath = filePath || defaultFilePath;
  let profileObject = Ini.decodeIniData(Utils.readFile(credentialPath));
  let outputProfileObject = Utils.deepCopy(profileObject);
  outputProfileObject[profile] = credentials;
  let encodedProfile = Ini.encodeIniFormat(outputProfileObject);
  Utils.writeFile(credentialPath, encodedProfile);
}
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var DEFAULT_PROFILE = "default";
function getSortedProfilesCredentials(includeDefaultProfile = true) {
  const credentialsFile = path.join(os.homedir(), ".aws", "credentials");
  let result = [];
  if (fs.existsSync(credentialsFile)) {
    try {
      const profiles = profileHandler.listProfiles();
      if (includeDefaultProfile === false) {
        const index = profiles.indexOf(DEFAULT_PROFILE);
        if (index > -1) {
          profiles.splice(index, 1);
        }
      }
      result = profiles.sort();
    } catch (error) {
      console.log(`File '${credentialsFile}' is not valid.`);
      console.log(error);
    }
  } else {
    console.log(`File '${credentialsFile}' does not exist.`);
  }
  return result;
}
var sortedProfilesCreds = getSortedProfilesCredentials();
var SuggestAwsProfile = class extends import_obsidian.SuggestModal {
  // Returns all available suggestions.
  getSuggestions(query) {
    let localsortedProfilesCreds = sortedProfilesCreds;
    let choice = localsortedProfilesCreds.filter(
      (profile) => profile.toLowerCase().includes(query.toLowerCase())
    );
    return choice;
  }
  // Renders each suggestion item.
  renderSuggestion(profile, el) {
    el.createEl("div", { text: profile });
  }
  // Perform action on the selected suggestion.
  onChooseSuggestion(profile, evt) {
    let profileCreds = profileHandler.getProfileCredentials(profile);
    addProfile("default", profileCreds);
    new import_obsidian.Notice(`Selected ${profile} as Default`);
  }
};
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.addCommand({
      id: "switch profile",
      name: "Switch to AWS profile",
      callback: () => {
        console.log("Hey, you!" + os.homedir());
        new SuggestAwsProfile(this.app).open();
      }
    });
    console.log("loading plugin");
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon("dice", "AWS Profile Manager", (evt) => {
      new import_obsidian.Notice("Hej Bro, make your aws profile choice !");
      new SuggestAwsProfile(this.app).open();
    });
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Status Bar Text");
    this.addSettingTab(new SampleSettingTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  onunload() {
    console.log("unloading plugin");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for my awesome plugin." });
    new import_obsidian.Setting(containerEl).setName("Setting #1").setDesc("It's a secret").addText((text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.mySetting).onChange(async (value) => {
      console.log("Secret: " + value);
      this.plugin.settings.mySetting = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
