/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/aws-profile-handler/lib/ini.js
var require_ini = __commonJS({
  "node_modules/aws-profile-handler/lib/ini.js"(exports, module2) {
    "use strict";
    var Ini2 = class {
      static decodeIniData(rawData) {
        let currentSection;
        let map = {};
        let uniqueSectionFlag = false;
        let lines = rawData.split(/\r?\n/);
        if (Ini2._emptyCheck(lines))
          return {};
        lines.forEach((line) => {
          line = line.split(/(^|\s)[;#]/)[0].trim();
          if (!line)
            return;
          let section = line.match(/^\s*\[([^\[\]]+)\]\s*$/);
          if (section && uniqueSectionFlag) {
            throw new Error("Invalid AWS credential file. Cannot have nested sessions");
          } else if (section) {
            currentSection = section[1];
            uniqueSectionFlag = true;
          } else {
            let item = line.match(/^\s*(.+?)\s*=\s*(.+?)\s*$/);
            if (item) {
              map[currentSection] = map[currentSection] || {};
              map[currentSection][item[1]] = item[2];
              uniqueSectionFlag = false;
            } else {
              throw new Error("Invalid AWS credential file. Incomplete key/value pair");
            }
          }
        });
        return map;
      }
      static encodeIniFormat(iniObject) {
        function _flattenObject(object) {
          let listObject = Object.keys(object).reduce((result, key) => {
            result.push(key + "=" + object[key]);
            return result;
          }, []);
          return listObject;
        }
        let dividedIntoListOfObjects = Object.keys(iniObject).map((session) => {
          let newObject = {};
          newObject[session] = iniObject[session];
          return newObject;
        });
        let encodedIniContentList = dividedIntoListOfObjects.reduce(
          (iniContentList, sessionObject) => {
            let sessionName = Object.keys(sessionObject)[0];
            iniContentList.push("[" + sessionName + "]");
            let listChild = _flattenObject(sessionObject[sessionName]);
            return iniContentList.concat(listChild, "");
          },
          []
        );
        return encodedIniContentList.join("\n");
      }
      static _emptyCheck(array) {
        if (array.length === 0)
          return true;
        for (let item of array) {
          if (item.trim().length !== 0) {
            return false;
          }
        }
        return true;
      }
    };
    module2.exports = Ini2;
  }
});

// node_modules/aws-profile-handler/lib/utils.js
var require_utils = __commonJS({
  "node_modules/aws-profile-handler/lib/utils.js"(exports, module2) {
    "use strict";
    var fs2 = require("fs");
    var Utils2 = class {
      static writeFile(filePath, encodedOutput) {
        fs2.writeFileSync(filePath, encodedOutput, "utf-8");
      }
      static deepCopy(object) {
        return JSON.parse(JSON.stringify(object));
      }
      static readFile(filePath) {
        return fs2.readFileSync(filePath, "utf-8");
      }
    };
    module2.exports = Utils2;
  }
});

// node_modules/aws-profile-handler/index.js
var require_aws_profile_handler = __commonJS({
  "node_modules/aws-profile-handler/index.js"(exports, module2) {
    "use strict";
    var path2 = require("path");
    var os2 = require("os");
    var Ini2 = require_ini();
    var Utils2 = require_utils();
    var defaultFilePath2 = path2.join(os2.homedir(), ".aws", "credentials");
    var awsProfileHandler = class {
      /**
       * @deprecated
       * @param filePath
       */
      constructor(filePath) {
        const defaultFilePath3 = path2.join(os2.homedir(), ".aws", "credentials");
        this.filePath = filePath || defaultFilePath3;
        this.profileObject = Ini2.decodeIniData(Utils2.readFile(this.filePath));
      }
      /**
       * @deprecated
       * @return {Array}
       */
      listProfiles() {
        return Object.keys(this.profileObject);
      }
      /**
       * @deprecated
       * @param profile
       * @return {*}
       */
      getProfileCredentials(profile) {
        let credentials = this.profileObject[profile];
        if (!credentials)
          return null;
        else
          return Utils2.deepCopy(credentials);
      }
      /**
       * @deprecated
       * @param profile
       */
      deleteProfile(profile) {
        let outputProfileObject = Utils2.deepCopy(this.profileObject);
        delete outputProfileObject[profile];
        let encodedProfile = Ini2.encodeIniFormat(outputProfileObject);
        Utils2.writeFile(this.filePath, encodedProfile);
      }
      /**
       * @deprecated
       * @param profile
       * @param credentials
       */
      addProfile(profile, credentials) {
        let outputProfileObject = Utils2.deepCopy(this.profileObject);
        outputProfileObject[profile] = credentials;
        let encodedProfile = Ini2.encodeIniFormat(outputProfileObject);
        Utils2.writeFile(this.filePath, encodedProfile);
      }
      static listProfiles(filePath) {
        let credentialPath = filePath || defaultFilePath2;
        let profileObject = Ini2.decodeIniData(Utils2.readFile(credentialPath));
        return Object.keys(profileObject);
      }
      static getProfileCredentials(profile, filePath) {
        if (!profile || profile.trim().length === 0) {
          throw new Error("Invalid Input: profile name cannot be omitted nor only contains white spaces.");
        }
        let credentialPath = filePath || defaultFilePath2;
        let profileObject = Ini2.decodeIniData(Utils2.readFile(credentialPath));
        let credentials = profileObject[profile];
        if (!credentials)
          return null;
        else
          return Utils2.deepCopy(credentials);
      }
      static deleteProfile(profile, filePath) {
        if (!profile || profile.trim().length === 0) {
          throw new Error("Invalid Input: profile name cannot be omitted nor only contains white spaces.");
        }
        let credentialPath = filePath || defaultFilePath2;
        let profileObject = Ini2.decodeIniData(Utils2.readFile(credentialPath));
        let outputProfileObject = Utils2.deepCopy(profileObject);
        delete outputProfileObject[profile];
        let encodedProfile = Ini2.encodeIniFormat(outputProfileObject);
        Utils2.writeFile(credentialPath, encodedProfile);
      }
      static addProfile(profile, credentials, filePath) {
        if (!profile || profile.trim().length === 0) {
          throw new Error("Invalid Input: profile name cannot be omitted nor only contains white spaces.");
        }
        if (!credentials || Object.keys(credentials).length === 0) {
          throw new Error("Invalid Input: credentials cannot be omitted nor empty.");
        }
        if (Object.keys(credentials).length !== 2 || !this.isValidSchema(credentials) && !this.isValidAltSchema(credentials)) {
          throw new Error("Invalid input: credentials schema is invalid.");
        }
        let credentialPath = filePath || defaultFilePath2;
        let profileObject = Ini2.decodeIniData(Utils2.readFile(credentialPath));
        let outputProfileObject = Utils2.deepCopy(profileObject);
        outputProfileObject[profile] = credentials;
        let encodedProfile = Ini2.encodeIniFormat(outputProfileObject);
        Utils2.writeFile(credentialPath, encodedProfile);
      }
      static isValidSchema(credentials) {
        return credentials.hasOwnProperty("aws_access_key_id") && credentials.hasOwnProperty("aws_secret_access_key");
      }
      static isValidAltSchema(credentials) {
        return credentials.hasOwnProperty("role_arn") && credentials.hasOwnProperty("source_profile");
      }
    };
    module2.exports = awsProfileHandler;
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  SuggestAwsProfileModal: () => SuggestAwsProfileModal,
  default: () => AwsProfileManagerPlugin,
  getSortedProfilesCredentials: () => getSortedProfilesCredentials
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var os = __toESM(require("os"));
var path = __toESM(require("path"));
var fs = __toESM(require("fs"));
var profileHandler = __toESM(require_aws_profile_handler());
var Ini = require_ini();
var Utils = require_utils();
var defaultFilePath = path.join(os.homedir(), ".aws", "credentials");
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var DEFAULT_PROFILE = "default";
function addProfile(profile, credentials, filePath) {
  if (!profile || profile.trim().length === 0) {
    throw new Error("Invalid Input: profile name cannot be omitted nor only contains white spaces.");
  }
  if (!credentials || Object.keys(credentials).length === 0) {
    throw new Error("Invalid Input: credentials cannot be omitted nor empty.");
  }
  if (Object.keys(credentials).length < 3 || !profileHandler.isValidSchema(credentials) && !profileHandler.isValidAltSchema(credentials)) {
    throw new Error("Invalid input: credentials schema is invalid.");
  }
  let credentialPath = filePath || defaultFilePath;
  let profileObject = Ini.decodeIniData(Utils.readFile(credentialPath));
  let outputProfileObject = Utils.deepCopy(profileObject);
  outputProfileObject[profile] = credentials;
  let encodedProfile = Ini.encodeIniFormat(outputProfileObject);
  Utils.writeFile(credentialPath, encodedProfile);
}
function getSortedProfilesCredentials(includeDefaultProfile = true) {
  const credentialsFile = path.join(os.homedir(), ".aws", "credentials");
  let result = [];
  if (fs.existsSync(credentialsFile)) {
    try {
      const profiles = profileHandler.listProfiles();
      if (includeDefaultProfile === false) {
        const index = profiles.indexOf(DEFAULT_PROFILE);
        if (index > -1) {
          profiles.splice(index, 1);
        }
      }
      result = profiles.sort();
    } catch (error) {
      console.log(`File '${credentialsFile}' is not valid.`);
      console.log(error);
    }
  } else {
    console.log(`File '${credentialsFile}' does not exist.`);
  }
  return result;
}
var sortedProfilesCreds = getSortedProfilesCredentials(false);
var _a;
var originProfile = (_a = profileHandler.getProfileCredentials(DEFAULT_PROFILE)) == null ? void 0 : _a.originProfile;
var SuggestAwsProfileModal = class extends import_obsidian.SuggestModal {
  // Returns all available suggestions.
  getSuggestions(query) {
    let localsortedProfilesCreds = sortedProfilesCreds;
    let choice = localsortedProfilesCreds.filter(
      (profile) => profile.toLowerCase().includes(query.toLowerCase())
    );
    return choice;
  }
  // Renders each suggestion item.
  renderSuggestion(profile, el) {
    el.createEl("div", { text: profile });
  }
  // Perform action on the selected suggestion.
  onChooseSuggestion(profile, evt) {
    let profileCreds = profileHandler.getProfileCredentials(profile);
    profileCreds["originProfile"] = profile;
    addProfile("default", profileCreds);
    new import_obsidian.Notice(`New default profile is '${profile}'`);
    let items = document.getElementsByClassName("status-bar-item plugin-obsidian-aws-profile-manager");
    items[0].innerHTML = "";
    items[0].createEl("span", { text: "\u{1F3AD}" });
    items[0].createEl("span", { text: profile });
  }
};
var AwsProfileManagerPlugin = class extends import_obsidian.Plugin {
  async onload() {
    const item = this.addStatusBarItem();
    item.createEl("span", { text: "\u{1F3AD}" });
    if (originProfile == null) {
      item.createEl("span", { text: "Choose a profile" });
    } else {
      item.createEl("span", { text: originProfile });
    }
    this.addCommand({
      id: "switch profile",
      name: "Switch to AWS profile",
      callback: () => {
        console.log("Hey, you! " + os.homedir());
        new SuggestAwsProfileModal(this.app).open();
      }
    });
    await this.loadSettings();
    (0, import_obsidian.addIcon)("aws", '<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 455 455" fill="#FFFFFF" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path style="fill-rule:evenodd;clip-rule:evenodd;" d="M235.916,190.817c-10.274,0.966-32.834,4.09-43.941,13.309c-14.653,12.159-20.575,52.996,11.215,52.996c4.959,0,9.285-0.5,13.073-1.346c14.641-3.251,24.968-16.399,24.968-31.399v-28.722C241.231,192.791,238.768,190.545,235.916,190.817z"/><path d="M0,0v455h455V0H0z M215.655,111.854c-19.068,0-31.26,20.675-35.458,29.166c-1.041,2.116-3.351,3.277-5.673,2.885l-38.255-6.464c-3.168-0.53-5.173-3.698-4.251-6.778c4.815-16.085,23.591-59.949,85.197-59.949c75.437,0,82.607,48.625,82.607,60.468v98.509c0,0-0.314,8.416,7.169,19.015c2.399,3.382,4.34,6.073,5.878,8.155c2.649,3.59,2.202,8.58-1.03,11.659l-27.895,26.576c-3.288,3.113-8.408,3.285-11.845,0.336c-3.557-3.049-7.95-7.116-11.237-11.196c-3.068-3.796-5.445-7.244-7.114-9.846c-1.369-2.127-4.415-2.224-5.923-0.208c-6.736,9.091-24.893,28.45-57.097,28.45c-42.084,0-70.134-33.981-70.134-63.278c0-29.305,18.701-66.716,59.224-75.132c28.439-5.9,46.898-5.673,55.381-5.001c2.929,0.228,5.401-2.094,5.401-5.023v-22.7C240.601,131.499,239.668,111.865,215.655,111.854z M319.162,358.74c-24.632,13.711-48.637,25.546-105.667,25.546c-69.298,0-124.701-44.091-135.6-57.497c-10.912-13.409-7.333-20.262-7.333-20.262s4.207-8.266,16.052,0c11.845,8.252,67.335,47.226,122.51,47.226c55.176,0,93.508-14.655,105.981-19.959c12.462-5.292,26.498-11.92,29.927-5.49C348.459,334.739,343.783,345.021,319.162,358.74z M354.142,359.132c-7.267-3.937,0.239-11.931,3.274-21.508c3.038-9.588,4.676-18.004,0-22.127c-4.673-4.132-11.454-2.191-26.887-0.325c-15.424,1.877-14.492-5.143-14.492-5.143s0-2.796,3.504-5.14c3.504-2.333,50.891-21.9,62.192-4.437C395.326,321.452,362.634,363.73,354.142,359.132z"/>');
    const ribbonIconEl = this.addRibbonIcon("aws", "AWS Profile Manager", (evt) => {
      new import_obsidian.Notice("Hej Bro " + os.homedir() + ", make your aws profile choice !");
      new SuggestAwsProfileModal(this.app).open();
    });
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    this.addSettingTab(new AwsProfileManagerSettingTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  onunload() {
    console.log("unloading plugin");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var AwsProfileManagerSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for my awesome plugin." });
    new import_obsidian.Setting(containerEl).setName("Setting #1").setDesc("It's a secret").addText((text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.mySetting).onChange(async (value) => {
      console.log("Secret: " + value);
      this.plugin.settings.mySetting = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
